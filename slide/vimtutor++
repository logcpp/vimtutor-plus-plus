



"                                 Presentation


"                    GETTING TO KNOW ABOUT WHAT VIM CAN DO:


"                                  by logcpp
"                     EEIC Vim Meetup -- Feburary ?, 2022


"                               Follow Along At:

"                 https://github.com/logcpp/vimtutor-plus-plus









" Goals Of This Talk:

"     - Showing the built-in features of Vim
"     - Increasing understanding of the "default" Vim
"     - Offering useful option settings and advanced tricks
"     - Going "BEYOND" vimtutor


" NOT Goals Of This Talk:

"     - Neovim
"     - Modern plugins
"     - Vim source code









" Why Vim:


"     - Lightweight
"     - Runs Everywhere
"     - Keyboard Based Interface (Absolute)
"     - Command Repetition
"     - Regex Supprted Search and Substitution
"     - Able to Edit Multiple Files Simultaneously
"     - Synagy with Shell/Commandline
"     - Extensibility & Customizability
"     - Comprehensive Documentation










" Contents:


"     0. What Vim Can Do

"     1. Basic Commands (reviewing vimtutor + "f", "t")
"     2. The "Syntax" of Vim ( "i.", "a.", ".", "@")
"     3. Useful Options (for good editing & good looking)

"     4. Advanced Commands (fold, searching, global, filter)
"     5. Vimscript is powerful
"     6. Writing Your Own Plugin










" Demonstration:  What Vim Can Do


"     1. repetition (macros)
"     2. creating workspace (tabs, windows, buffers)
"     3. spellcheck (options)
"     4. file exploring (netrw:plugin)
"     5. quickfix (make file & compiling)
"     6. completion (in multiple scopes)
"     7. vimdiff, vimgrep (content viewing)
"     8. combine with the shell (commandline interaction)
"     9. animation, presentation, etc. (vimscript)










" Modes In Vim:


"   Normal mode ---+--> ":" => Command-line mode ------------------------+
"     |   ^        |                                                     |
"     |   |        +--> "i" => Insert mode => <C-o> => (insert) mode ----+
"     |   |        |                                                     |
"     |   |        +--> "R" => Replace mode => <C-o> => (replace) mode --+
"    "Q"  |        |                                                     |
"     |   |        +--> "v/V/<C-v>" => Visual mode <=> Select mode ------+
"     |   |                                                              |
"     |   |                                                              |
"     |   +---------------------- "<Esc>" <------------------------------+
"     |
"     +----> "Ex" mode







" Normal Mode:    Basic Commands (1)


"     - moving cursor: "h", "j", "k", "l"
"     - insert: "i"

"     - open newline below: "o" (small)
"     - Open newline above: "O" (capital)

"     - undo: "u"
"     - redo: "<C-r>"











" Normal Mode:    Basic Commands (2)


"     - Go to line N: "<N>G"
"     - Go to the end of the file: "G"
"     - go to the top of the file: "gg"
"     - go to column 0: "0"
"     - go to the end of the line: "$"

"     - delete a character: "x"
"     - "d"elete operator: "d"
"     - "y"ank operator: "y"
"     - "p"ut deleted/yanked text: "p"









" Normal Mode:    Basic Commands (3)


"     - find
"          "f" = find character forward
"          "F" = find character backward


"     - till/to
"          "t" = move forward till character
"          "T" = move backward till character











" Normal Mode:    Formatting Your Code


"     - indent (shift right): ">>"
"     - dedent (shift left): "<<"

"     - auto-formatting: "="















" Normal Mode:    The "Syntax" of Vim (1)


"     - repetition:

"         [N]command -> repeat [N] times


"     - example:

"         3j    ->  go 3 lines downward
"         10dd  ->  delete 10 lines
"         22@a  ->  do macro "a" 22 times









" Normal Mode:    The "Syntax" of Vim (2)


"     - motion:
"          "0" - to column 0
"          "$" - to the end
"          "w" - word (forward)
"          "b" - word (backward)

"    => basic syntax: {operator}{motion}

"       e.g. "dw" - delete a word
"            "c$" - change to the end









" Ex Commands:

        write 
        edit 
        quit
        wa
        wqa
        set number
        set nonumber
        syntax enable
        find 
        1d
        normal 3j

"     => learn "vimscript" for further more







" Insert Mode:


"     - useful shortcuts while editing

"         <C-u> = Ctrl + U
"         <C-w> = Ctrl + W
"         <C-h> = Ctrl + H
"         <C-r> = Ctrl + R
"         <C-k> = Ctrl + K
"         <C-v> = Ctrl + V
"         <C-t> = Ctrl + T
"         <C-d> = Ctrl + D









" Useful Command: The "Syntax" of Vim (3)


"     - text object:
"          "i" = in / inside
"          "a" = around / along with

"     => basic syntax: {operator}{motion}

"       e.g. "daw" - delete around word
"            "cib" - change inside braces
"            "yap" - yank (copy) a paragraph










" Useful Command: The "Syntax" of Vim (4)


"     - dot repetition:
"          "." = repeat the previous command
"       e.g. "dd12." -> delete a line, and 12 below


"     - macro repetition:
"          "q" = start/end recording a macro
"       e.g. "qaddpq" -> switch the line with the line below
"            "@a@@"  -> repeat above 2 times

"       => "@@" = repeat the previous macro








" Useful Command: Use the Ex Command!!


"     - :find {filename}

"     - :[range]d
"     - :[range]m {address}
"     - :[range]t {address}

"     - :[range]normal {cmd}

"     - :bnext
"     - :vsp
"     - :tabnew








" Useful Options: Edit your ".vimrc" (1)


"     - syntax highlighting
          syntax enable
          set background=dark
          colorscheme blue

"     - set {option}
          set number autoindent showcmd
          set notimeout ttimeoutlen=0 
          set shiftwidth=4 tabstop=4 
          set incsearch wildmenu

"     => use `:h` to look for help!







" Useful Mappings: Edit your ".vimrc" (2)


"     - "noremap"
"         nnoremap, inoremap, vnoremap
"         nnoremap <leader>{char} {cmd}

            nnoremap Q ZZ

            let mapleader = {char}
            nnoremap <leader>a :echo "hello"<CR>

"     - special characters
          <CR> <BS> <Space>
          <silent> <expr> <buffer>







" Useful Settings: Edit your ".vimrc" (3)


"     - highlight
"         hi {group} cterm={attr} ctermfg={color} ctermbg={color}

"     e.g.
          hi StatusLine cterm=underline ctermfg=lightblue ctermbg=NONE


"     => choose a main color while setting colors!











" Advanced Commands:


"     - register
"           "{reg}{cmd}

"     - mark
"           m{char} '{char} `{char}

"     - fold
"           :fold  zf  za











" Advanced Commands:


"     - search & substitute
"           :[range]s/{pattern}/{string}/{flags}

"     - global
"           :g/{pattern}/{cmd}

"     - filter
"           :!{program}











" Vimscript:


      echo "Hello world!"

      1+1

      let a = "string"[2:]

      function! F()
        echo "Hello world!"
      endfunction
      call F()









" Writing Your Own Plugin:


"     Plugin Name: "test"
"     Location: $HOME/.vim/plugin/test/

"         test/
"           ├── autoload
"           │   └── test.vim
"           ├── doc
"           │   └── test.txt
"           └── plugin
"               └── test.vim













"                                  Thank You!


"                            Enjoy Your Vim Life!!









